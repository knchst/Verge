(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{115:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return s})),n.d(t,"rightToc",(function(){return i})),n.d(t,"default",(function(){return l}));var r=n(2),a=n(6),o=(n(0),n(130)),c={id:"extended-computed-property",title:"Extended Computed property on the State",sidebar_label:"Extended Computed property"},s={id:"VergeStore/extended-computed-property",isDocsHomePage:!1,title:"Extended Computed property on the State",description:"Overview",source:"@site/docs/VergeStore/extended-computed-property.md",permalink:"docs/VergeStore/extended-computed-property",editUrl:"https://github.com/VergeGroup/Verge/docs/docs/VergeStore/extended-computed-property.md",sidebar_label:"Extended Computed property",sidebar:"docs",previous:{title:"Changes object - helps detecting differences and reduces copy-cosuming",permalink:"docs/VergeStore/changes"},next:{title:"Derived / BindingDerived - derives a any shape value from the state",permalink:"docs/VergeStore/derived"}},i=[{value:"Overview",id:"overview",children:[]},{value:"Instruction",id:"instruction",children:[{value:"Computed Property on State",id:"computed-property-on-state",children:[]}]},{value:"Extended Computed Properties",id:"extended-computed-properties",children:[]}],p={rightToc:i};function l(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h2",{id:"overview"},"Overview"),Object(o.b)("p",null,"A declaration to add a computed-property into the state. It helps to add a property that does not need to be stored-property. It's like Swift's computed property like following:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-swift"}),"struct State {\n var items: [Item] = [] {\n\n var itemsCount: Int {\n   items.count\n }\n}\n")),Object(o.b)("p",null,"However, this Swift's computed-property will compute the value every state changed. It might become a serious issue on performance."),Object(o.b)("p",null,"Compared with Swift's computed property and this, this does not compute the value every state changes, It does compute depend on specified rules.\nThat rules mainly come from the concept of Memoization."),Object(o.b)("p",null,"Example code:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-swift"}),"struct State: ExtendedStateType {\n\n var name: String = ...\n var items: [Int] = []\n\n struct Extended: ExtendedType {\n\n   static let instance = Extended()\n\n   let filteredArray = Field.Computed<[Int]> {\n     $0.items.filter { $0 > 300 }\n   }\n   .dropsInput {\n     $0.noChanges(\\.items)\n   }\n }\n}\n")),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-swift"}),"let store: MyStore<State, Never> = ...\n\nlet state = store.state\n\nlet result: [Int] = state.computed.filteredArray\n")),Object(o.b)("h2",{id:"instruction"},"Instruction"),Object(o.b)("h3",{id:"computed-property-on-state"},"Computed Property on State"),Object(o.b)("p",null,"States may have a property that actually does not need to be stored property. In that case, we can use computed property."),Object(o.b)("p",null,"Although, we should take care of the cost of the computing to return value in that. What is that case? Followings explains that."),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"Computed concept is inspired from Vuex Getters. ",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"https://vuex.vuejs.org/guide/getters.html"}),"https://vuex.vuejs.org/guide/getters.html"))),Object(o.b)("p",null,"For example, there is itemsCount."),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-swift"}),"struct State {\n  var items: [Item] = []\n\n  var itemsCount: Int = 0\n}\n")),Object(o.b)("p",null,"In order to become itemsCount dynamic value, it needs to be updated with updating items like this."),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-swift"}),"struct State {\n  var items: [Item] = [] {\n    didSet {\n      itemsCount = items.count\n    }\n  }\n\n  var itemsCount: Int = 0\n}\n")),Object(o.b)("p",null,"We got it, but we don't think it's pretty simple. Actually we can do this like this."),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-swift"}),"struct State {\n  var items: [Item] = [] {\n\n  var itemsCount: Int {\n    items.count\n  }\n}\n")),Object(o.b)("p",null,"With this, it did get to be more simple."),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-swift"}),"struct State {\n  var items: [Item] = []\n\n  var processedItems: [ProcessedItem] {\n    items.map { $0.doSomeExpensiveProcessing() }\n  }\n}\n")),Object(o.b)("p",null,"As an example, Item can be processed with the something operation that takes expensive cost. We can replace this example with filter function."),Object(o.b)("p",null,"This code looks is very simple and it has got data from source of truth. Every time we can get correct data. However we can look this takes a lot of the computing resources. In this case, it would be better to use didSet and update data."),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-swift"}),"struct State {\n  var items: [Item] = [] {\n    didSet {\n      processedItems = items.map { $0.doSomeExpensiveProcessing() }\n    }\n  }\n\n  var processedItems: [ProcessedItem] = []\n}\n")),Object(o.b)("p",null,"However, as we said, this approach is not simple. And this can not handle easily a case that combining from multiple stored property. Next introduces one of the solutions."),Object(o.b)("h2",{id:"extended-computed-properties"},"Extended Computed Properties"),Object(o.b)("p",null,"VergeStore has a way of providing computed property with caching to reduce taking computing resource."),Object(o.b)("p",null,"Keywords are:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"ExtendedStateType")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"ExtendedType")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"Field.Computed<T>"))),Object(o.b)("p",null,"Above State code can be improved like following."),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-swift"}),"struct State: ExtendedStateType {\n\n  var name: String = ...\n  var items: [Int] = []\n\n  struct Extended: ExtendedType {\n\n    static let instance = Extended()\n\n    let filteredArray = Field.Computed<[Int]> {\n      $0.items.filter { $0 > 300 }\n    }\n    .dropsInput {\n      $0.noChanges(\\.items)\n    }\n  }\n}\n")),Object(o.b)("p",null,"To access that computed property, we can do the followings:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-swift"}),"let store: MyStore<State, Never> = ...\n\nlet state = store.state\n\nlet result: [Int] = state.computed.filteredArray\n")),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"store.computed.filteredArray")," will be updated only when items updated. Since the results are stored as a cache, we can take value without computing."),Object(o.b)("p",null,"Followings are the steps describes when it computes while paying the cost."),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-swift"}),'let store: MyStore<State, Never> = ...\n\n// It computes\nstore.state.computed.filteredArray\n\n// no computes because results cached with first-time access\nstore.state.computed.filteredArray\n\n// State will change but no affects items\nstore.commit {\n  $0.name = "Muukii"\n}\n\n// no computes because results cached with first-time access\nstore.state.computed.filteredArray\n\n// State will change with it affects items\nstore.commit {\n  $0.items.append(...)\n}\n\n// It computes new value\nstore.state.computed.filteredArray\n')))}l.isMDXComponent=!0},130:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return b}));var r=n(0),a=n.n(r);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=a.a.createContext({}),l=function(e){var t=a.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=l(e.components);return a.a.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},m=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=l(n),m=r,b=d["".concat(c,".").concat(m)]||d[m]||u[m]||o;return n?a.a.createElement(b,s(s({ref:t},p),{},{components:n})):a.a.createElement(b,s({ref:t},p))}));function b(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,c=new Array(o);c[0]=m;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:r,c[1]=s;for(var p=2;p<o;p++)c[p]=n[p];return a.a.createElement.apply(null,c)}return a.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"}}]);