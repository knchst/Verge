(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{162:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return o})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return l}));var a=n(2),r=n(9),i=(n(0),n(168)),c={id:"dispatcher",title:"Dispatcher - performs a mutation from away the store",sidebar_label:"Dispatcher"},o={id:"VergeStore/dispatcher",isDocsHomePage:!1,title:"Dispatcher - performs a mutation from away the store",description:"What Dispatcher does",source:"@site/docs/VergeStore/dispatcher.md",permalink:"/docs/VergeStore/dispatcher",editUrl:"https://github.com/VergeGroup/Verge/docs/docs/VergeStore/dispatcher.md",sidebar_label:"Dispatcher",sidebar:"docs",previous:{title:"Derived / BindingDerived - derives a any shape value from the state",permalink:"/docs/VergeStore/derived"},next:{title:"Logging",permalink:"/docs/VergeStore/logging"}},s=[{value:"What Dispatcher does",id:"what-dispatcher-does",children:[]},{value:"Create multiple Dispatcher",id:"create-multiple-dispatcher",children:[]},{value:"Create scoped dispatcher",id:"create-scoped-dispatcher",children:[{value:"Detaching to other tree",id:"detaching-to-other-tree",children:[]}]}],p={rightToc:s};function l(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h2",{id:"what-dispatcher-does"},"What Dispatcher does"),Object(i.b)("p",null,"Dispatcher allows us to update the state of the Store from away the store and to manage dependencies to create Mutation."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Dispatcher does not have own state. Dispatcher runs with Store.")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Example")),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-swift"}),"final class MyDispatcher: MyStore.Dispatcher {\n\n}\n\nlet store = MyStore()\nlet dispatcher = MyDispatcher(targetStore: store)\n")),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"\ud83d\udca1\nActual type of MyStore.Dispatcher is DispatcherBase<State, Never> It is a typealias to write shortly.")),Object(i.b)("p",null,"Managing dependencies code"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-swift"}),"final class MyDispatcher: MyStore.Dispatcher {\n\n  let apiClient: APIClient\n\n  init(apiClient: APIClient, targetStore: Store<RootState>) {\n    self.apiClient = apiClient\n    super.init(targetStore: targetStore)\n  }\n\n  // an example of fetching data and commit\n  func fetchData() {\n    apiClient.fetchData { [weak self] result in\n      switch result {\n      case .success(let data):\n        let items = data.encode(...)\n        self?.commit {\n          $0.fetchedItems = items\n        }\n      case .failure(let error):\n      // handles error\n      }\n    }\n  }\n}\n\nlet store = MyStore()\nlet apiClient = APIClient()\nlet dispatcher = MyDispatcher(apiClient: apiClient, target: store)\n\ndispatcher.fetchData()\n")),Object(i.b)("h2",{id:"create-multiple-dispatcher"},"Create multiple Dispatcher"),Object(i.b)("p",null,Object(i.b)("img",Object(a.a)({parentName:"p"},{src:"https://user-images.githubusercontent.com/1888355/82821486-28586a00-9edf-11ea-8c98-062eafcc4f16.png",alt:"image"}))),Object(i.b)("p",null,"We can create multiple Dispatcher each use-cases."),Object(i.b)("p",null,"For example, In case the timing of getting dependencies that to be needed by run Action or Mutation is different, it will not be easy to define in the one dispatcher. We will have the optional properties in there."),Object(i.b)("p",null,"In this case, creating multiple dispatchers will help us. Define the dispatcher each the timing of getting dependencies."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-swift"}),"class LoggedInDispatcher: MyStore.Dispatcher {\n\n  let apiClientNeedsAuthToken = ...\n  ...\n}\n\nclass LoggedOutDispatcher: DispatcherBase<RootState> {\n\n  let apiClientWithoutAuthToken = ...\n  ...\n}\n\nlet store = MyStore()\nlet loggedInDispatcher = LoggedInDispatcher(...)\nlet loggedOutDispatcher = LoggedOutDispatcher(...)\n")),Object(i.b)("h2",{id:"create-scoped-dispatcher"},"Create scoped dispatcher"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"Dispatcher")," supports to commit specified scope of the state.\nIt helps to mutate with focused on a part of the large state tree."),Object(i.b)("p",null,"Here is a sample state that assuming a large app."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"AppState - db: Database - loggedIn: LoggedInState - myInfo: MyInfoState - loggedOut: LoggedOutState")),Object(i.b)("p",null,"We have ",Object(i.b)("inlineCode",{parentName:"p"},"database"),", ",Object(i.b)("inlineCode",{parentName:"p"},"logged-in")," and ",Object(i.b)("inlineCode",{parentName:"p"},"logged-out state"),".\n",Object(i.b)("inlineCode",{parentName:"p"},"database")," means normalized state shape to manage many entities."),Object(i.b)("p",null,"And then let's think about the case of creating a dispatcher focuses on the logged-in state."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-swift"}),"final class LoggedInService: Store.ScopedDispatcher<LoggedInState> {\n\n  init(store: Store) {\n    super.init(targetStore: store, scope: \\.loggedIn)\n  }\n\n  func someOperation() {\n    commit { (state: LoggedInState) in\n\n    }\n  }\n}\n")),Object(i.b)("p",null,"In LoggedInService, commit mutates ",Object(i.b)("inlineCode",{parentName:"p"},"LoggedInState")," directly.\nLike this, we can create a dispatcher each use-cases."),Object(i.b)("h3",{id:"detaching-to-other-tree"},"Detaching to other tree"),Object(i.b)("p",null,"Just in case, ScopedDispatcher supports also mutating on other state tree."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Moving on more deeper")),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-swift"}),"final class LoggedInService: Store.ScopedDispatcher<LoggedInState> {\n\n  func detachingOperation() {\n    let myInfo = detached(by: \\.myInfo)\n    myInfo.commit { (state: MyInfo) in\n\n    }\n  }\n}\n")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Detaches from root")),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-swift"}),"final class LoggedInService: Store.ScopedDispatcher<LoggedInState> {\n\n  func detachingOperation() {\n    let db = detached(from: \\.db)\n    db.commit { (state: Database) in\n\n    }\n  }\n}\n")))}l.isMDXComponent=!0},168:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return h}));var a=n(0),r=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=r.a.createContext({}),l=function(e){var t=r.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=l(e.components);return r.a.createElement(p.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},u=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=l(n),u=a,h=d["".concat(c,".").concat(u)]||d[u]||b[u]||i;return n?r.a.createElement(h,o(o({ref:t},p),{},{components:n})):r.a.createElement(h,o({ref:t},p))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,c=new Array(i);c[0]=u;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:a,c[1]=o;for(var p=2;p<i;p++)c[p]=n[p];return r.a.createElement.apply(null,c)}return r.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"}}]);